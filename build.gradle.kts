plugins {
    val configVersion: String by System.getProperties()
    val kotlinterVersion: String by System.getProperties()
    val kotlinVersion: String by System.getProperties()
    val versionsVersion: String by System.getProperties()

    id("java")
    kotlin("jvm") version kotlinVersion
    id("com.github.gmazzo.buildconfig") version configVersion
    id("org.jmailen.kotlinter") version kotlinterVersion
    id("com.github.ben-manes.versions") version versionsVersion
}

group = "com.pambrose"
version = "1.0.0"
val releaseDate = "01/22/2024"

buildConfig {
    useKotlinOutput()
    packageName(project.group.toString())
    documentation.set("Generated by BuildConfig plugin")
    buildConfigField("String", "APP_NAME", "\"${project.name}\"")
    buildConfigField("String", "VERSION", provider { "\"${project.version}\"" })
    buildConfigField("String", "RELEASE_DATE", "\"$releaseDate\"")
    buildConfigField("long", "BUILD_TIME", "${System.currentTimeMillis()}L")
}

repositories {
    mavenCentral()
}

val cliktVersion: String by project
val coroutinesVersion: String by project
val kotterVersion: String by project

dependencies {
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
    implementation("com.github.ajalt.clikt:clikt:$cliktVersion")
    implementation("com.varabyte.kotter:kotter-jvm:$kotterVersion")

    testImplementation("org.jetbrains.kotlin:kotlin-test")
}

tasks.test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(17)

    kotlinter {
        ignoreFailures = false
        reporters = arrayOf("checkstyle", "plain")
    }
}

tasks {
    // https://gist.github.com/daggerok/4f5f63448f24d991c273165615baa39a
    register("kotter", Jar::class.java) {
        archiveBaseName = "kotter"
        archiveClassifier = ""
        archiveVersion = ""
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest { attributes("Main-Class" to "com.pambrose.KotterDemo") }
        from(configurations.runtimeClasspath.get()
            .onEach { println("add from dependencies: ${it.name}") }
            .map { if (it.isDirectory) it else zipTree(it) })
        val sourcesMain = sourceSets.main.get()
        sourcesMain.allSource.forEach { println("add from sources: ${it.name}") }
        from(sourcesMain.output)
    }

    register("clikt", Jar::class.java) {
        archiveBaseName = "clikt"
        archiveClassifier = ""
        archiveVersion = ""
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest { attributes("Main-Class" to "com.pambrose.CliktDemoKt") }
        from(configurations.runtimeClasspath.get()
            .onEach { println("add from dependencies: ${it.name}") }
            .map { if (it.isDirectory) it else zipTree(it) })
        val sourcesMain = sourceSets.main.get()
        sourcesMain.allSource.forEach { println("add from sources: ${it.name}") }
        from(sourcesMain.output)
    }

    register("combo", Jar::class.java) {
        archiveBaseName = "combo"
        archiveClassifier = ""
        archiveVersion = ""
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest { attributes("Main-Class" to "com.pambrose.ComboDemoKt") }
        from(configurations.runtimeClasspath.get()
            .onEach { println("add from dependencies: ${it.name}") }
            .map { if (it.isDirectory) it else zipTree(it) })
        val sourcesMain = sourceSets.main.get()
        sourcesMain.allSource.forEach { println("add from sources: ${it.name}") }
        from(sourcesMain.output)
    }
}
